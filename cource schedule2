class Solution {
    public int[] findOrder(int V, int[][] edges) {
        ArrayList<Integer> ls = new ArrayList<>();
        Stack<Integer> stack = new Stack<>();
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();

        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }

        for (int[] edge : edges) {
            adj.get(edge[1]).add(edge[0]); // b â†’ a: b must be done before a
        }

        boolean[] visit = new boolean[V];
        boolean[] recStack = new boolean[V]; // for cycle detection

        for (int i = 0; i < V; i++) {
            if (!visit[i]) {
                if (helper(i, adj, visit, recStack, stack)) {
                    return new int[0]; // cycle detected
                }
            }
        }

        while (!stack.isEmpty()) {
            ls.add(stack.pop());
        }

        // Convert ArrayList<Integer> to int[]
        int[] result = new int[V];
        for (int i = 0; i < V; i++) {
            result[i] = ls.get(i);
        }

        return result;
    }

    public static boolean helper(int s, ArrayList<ArrayList<Integer>> adj, boolean[] visit, boolean[] recStack, Stack<Integer> stack) {
        visit[s] = true;
        recStack[s] = true;

        for (int elem : adj.get(s)) {
            if (!visit[elem]) {
                if (helper(elem, adj, visit, recStack, stack)) return true;
            } else if (recStack[elem]) {
                return true; // cycle detected
            }
        }

        recStack[s] = false;
        stack.push(s);
        return false;
    }
}