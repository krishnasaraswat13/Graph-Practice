class Solution {
    public boolean isCyclic(int V, int[][] edges) {
       
        // code here
     int n = V;
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] edge : edges) {
            adj.get(edge[0]).add(edge[1]);
            
        }
        boolean [] visit = new boolean[n];
        boolean [] path = new boolean[n];//ye bigO1 me hoga or agar arraylist use krte to bigO(n) hoga kyoki path store krna hoga
        for(int i=0;i<n;i++){
            if(!visit[i]){
                if(bfs(i,adj,visit,path)) return true; 
            }
        }
        return false;
    }
    
    public boolean bfs(int s,ArrayList<ArrayList<Integer>> adj,boolean [] visit,boolean[] path ){
        visit[s] = true;
        path[s]=true;
        for(int elem:adj.get(s)){
            if(!visit[elem]){
                if(bfs(elem,adj,visit,path)) return true;//yaha pr directly return fun nhi kr skte kyoki agar false aya to return nhi krna hai
            }
            else if(path[elem]==true) return true;
        }
        path[s]=false;
        return false;
    }
}